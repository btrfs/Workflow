#!/bin/bash

_exit() {
	echo $1
	exit 1
}

DIR=$(dirname $(readlink -f $0))

MSG_ID=""
EMAIL=""
skip_issue_arg=0

send_email_args=()
for i in "$@"; do
	# Catch '-i'|'--issue' and remove them from the argument list
	if [ "$skip_issue_arg" == "1" ]; then
		issue="$i"
		skip_issue_arg=0
		continue;
	fi
	if [ "$i" == "-i" -o "$i" == "--issue" ]; then
		skip_issue_arg=1
		continue
	fi

	# Catch the first directory/file as the email
	if [ -f "$i" -a -z "$EMAIL" ]; then
		EMAIL="$i"
	fi
	if [ -d "$i" -a -z "$EMAIL" ]; then
		EMAIL=$(find $1 -name '*cover\-letter.patch')
		[ -f $EMAIL ] || _exit "You must remember to use --cover-letter"
	fi
	# All the other parameters will be passed to git-send-email
	send_email_args+=("$i")
done

[ -z "$EMAIL" ] && _exit "Must specify a file or directory to send"

MSG_ID=$(grep -i 'Message-Id' ${EMAIL})
[ $? -ne 0 ] && _exit "Message-Id wasn't present in the patch provided"

MSG_ID=$(echo ${MSG_ID} | \
	python -c 'import re,sys; print(re.match("Message-Id: <(.*)>", sys.stdin.read(), re.IGNORECASE)[1])')
[ $? -ne 0 ] && _exit "Message-Id couldn't be extracted from the patch provided"

# Just incase somebody includes 'Subject:' in their commit body
SUBJECT=$(grep -E '^Subject:' ${EMAIL} | head -n1 | cut -c 10-)
[ $? -ne 0 ] && _exit "Subject wasn't present in the patch provided"

# All the remaining arguments are passed to git send-email directly
git send-email ${send_email_args[@]} || _exit "Couldn't send the email"
if [ -z "$issue" ]; then
	"$DIR"/btrfs-create-issue -m "${MSG_ID}" -t "${SUBJECT}"
else
	"$DIR"/btrfs-create-issue -m "${MSG_ID}" -t "${SUBJECT}" -i "$issue"
fi
